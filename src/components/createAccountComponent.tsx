import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useRouter } from 'next/router'
//Firebase imports
import { initializeApp } from "firebase/app";
import { getAuth,createUserWithEmailAndPassword } from "firebase/auth";
import { firebaseConfig } from '@/firebase-config'
//React imports
import { useEffect, useState } from 'react';
//Redux imports
import { useAppDispatch, useAppSelector } from '@/redux/hooks'
import { goToLogin } from '@/redux/loginSlice'

export default function CreateAccountComponent() {

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);

    const [message,setMessage] = useState('')
    const [newUserEmail,setNewUserEmail] = useState('')
    const [newUserPassword,setnewUserPassword] = useState('')

    const dispatch = useAppDispatch()


    const createAccountAction = async(e:any) =>{
            const auth = getAuth(app);
            e.preventDefault()
            createUserWithEmailAndPassword(auth, newUserEmail, newUserPassword)
            .then((userCredential) => {
            // Signed in 
            const user = userCredential.user;
        })
            .catch((error) => {
            const errorCode = error.code;
            const errorMessage:string = error.message;
            console.log(error.code)

            switch(errorCode) {
                case 'auth/email-already-in-use':
                  setMessage('User already exists, please try another email')
                  break;
                case 'auth/invalid-email':
                  setMessage('Email invalid')
                  break;
                case 'auth/weak-password':
                  setMessage('Password too short, it should have at least 6 characters')
                  break;
                default:
                  setMessage(errorMessage)
              }
        });
    }
    return (
      <>
        <Head>
          <title>Tasks - Create Account</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={styles.homeContainer}>
          <form className={styles.formContainer} onSubmit={createAccountAction}>
            <h1 className={styles.homeTitle}>Create your account</h1>
            <div className={styles.formFieldContainer}>
              <label htmlFor="newemail" className="form-label">Email address</label>
              <input onChange={(e)=>setNewUserEmail(e.target.value)} type="email" required className={styles.accountForm} id="newemail" placeholder="name@example.com"/>
            </div>
            <div className={styles.formFieldContainer}>
              <label htmlFor="newpassword" className="form-label">Password</label>
              <input onChange={(e)=>setnewUserPassword(e.target.value)} type="password" required className={styles.accountForm} id="newpassword"/>
            </div>
            <div className={styles.buttonsContainer}>
              <p className={styles.messageLog}>{message}</p>
              <button onClick={createAccountAction} className={styles.loginBtn} type="submit">Create Account</button>
              <button onClick={()=>dispatch(goToLogin())} className={styles.signUpBtn} type="button">Go Back</button>
            </div>
          </form>
        </main>
      </>
    )
  }
